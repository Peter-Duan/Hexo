<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NBT-TAG小记</title>
      <link href="/hexo/2020/07/06/NBT/"/>
      <url>/hexo/2020/07/06/NBT/</url>
      
        <content type="html"><![CDATA[<p>最近闲来无事和朋友闲谈，突然聊到了Minecraft和其中一个文件level.dat。尽管我用软件修改过这个文件，但是如何解析这个文件我并不知道。于是心血来潮尝试了一下。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><ol><li>反编译Minecraft查找相关函数。</li><li>Hex查看，并分析方法。<h3 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h3></li><li>学习一下NBT相关知识。</li><li>网上查询可知<code>level.dat</code>文件是个压缩文件格式是gzip。故解压得到同名文件<code>level</code>。<code>level</code>是一个NBT标签格式的文件，至此问题就变成了如何从零解析nbt格式的文件。</li><li>用notepad++打开，可以看到，一些字符串和乱码。推测是加密后的数据。</li></ol><h3 id="实践1："><a href="#实践1：" class="headerlink" title="实践1："></a>实践1：</h3><ol><li><p>打开jd-gui, 把<code>XXX.jar</code>丢进去，由于我并没有游戏本体，所以就用服务端代替了。搜索定位到<code>WorldLoader.class</code><img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-11-34-93.png" class="lazyload"></p></li><li><p>从这段代码可以看出来，它是如何读取dat文件的。这两个箭头分别是解压和读取。<img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-11-38-43.png" class="lazyload"></p></li></ol><p>3.之后由于不太了解Java所以并没有找到相关解密代码，所以放弃了这条路，换了另一条路。</p><h3 id="实践2："><a href="#实践2：" class="headerlink" title="实践2："></a>实践2：</h3><ol><li><p>网上找一个NbtEditor。读取了一下<code>level.dat</code>。<img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-11-41-14.png" class="lazyload">从图中我们得知，这个文件的结构，最上面是一个空名的TAG_Compound，下面是名为Data的TAG_Compound，然后才是其他的数据。</p></li><li><p>用Sublime Text 打开<code>level</code> 并用hex模式查看。<img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-11-46-42.png" class="lazyload">通过查询资料可知，所有的标签都有一个独立的ID和名称。标签的第一个字节为标签类型（ID）,其后两字节为存储名称的长度,之后以UTF-8格式的字符串的方式存储标签。</p></li><li><p>如上图所述，<code>0a 00 00</code> 第一个字节<code>0a</code>是代表标签ID，<code>0a</code>转换成10进制就是10。他所代表的就是TAG_Compound。<img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-11-48-68.png" class="lazyload"><br>后面的<code>00 00</code>是标签名称的长度，由NBTEditor可知第一个标签并没有名称，所以是零。</p></li><li><p>知道了规矩，我们就可以尝试解析了，我们先用地图种子练练手。<img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-11-56-87.png" class="lazyload"><br>我们可以看到<code>04 00 0a</code>，其中<code>04</code>是标签类型对应的是TAG_Long 8 字节 / 64 位；<code>00 0a</code>是标签名称长度，<code>0a</code>是十进制中的10，RandomSeed 刚好就是十位。</p></li><li><p>于是我们往RandomSeed后面推8位<code>74 2a17 004f 4271 c6</code>这就是种子的值了。于是我们把它转换从10进制就是<code>8370528147518681542</code><img alt data-src="https://storage.googleapis.com/peter-duan-blog/20-07-31-12-03-10.png" class="lazyload">可以看到与之前的结果相同。</p></li></ol><p>至此，我们已经大概了解了如何从头读取<code>level.dat</code>文件，但是我有些不解，为啥当时Notch不用Json或XML呢？非要自己造个轮子。</p>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VisualStudio1</title>
      <link href="/hexo/2020/04/13/VisualStudio1/"/>
      <url>/hexo/2020/04/13/VisualStudio1/</url>
      
        <content type="html"><![CDATA[<h2 id="Visual-Studio-1"><a href="#Visual-Studio-1" class="headerlink" title="Visual Studio #1"></a>Visual Studio #1</h2><p>我用Visual Studio写C++程序也有一段时间了，但是总是记不住很多东西，所以还是把知识写下来会比较好</p><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h3><p>Win32 API中微软给定义了许多数据类型，下面是我认为比较重要的。</p><p>其中，大多的指针类型名称前缀使用 <strong>P(Pointer)</strong>或<strong>LP(Long Pointer)</strong></p><table><thead><tr><th align="center">名称</th><th align="center">类型</th><th align="center">原型</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><strong>PVOID</strong></td><td align="center">void *</td><td align="center">typedef void *PVOID</td><td align="center">A pointer to any type.</td></tr><tr><td align="center"><strong>HANDLE</strong></td><td align="center">Pointer</td><td align="center">typedef PVOID HANDLE</td><td align="center">A handle to an object.</td></tr><tr><td align="center"><strong>HINSTANCE</strong></td><td align="center">HANDLE</td><td align="center">typedef HANDLE HINSTANCE</td><td align="center">A handle to an instance. This is the base address of the module in memory.</td></tr><tr><td align="center"><strong>HWND</strong></td><td align="center">HANDLE</td><td align="center">typedef HANDLE HWND</td><td align="center">A handle to a <a href="https://docs.microsoft.com/windows/desktop/winmsg/windows" target="_blank" rel="noopener">window</a>.</td></tr><tr><td align="center"><strong>DWORD</strong></td><td align="center">unsigned long</td><td align="center">typedef unsigned long DWORD</td><td align="center">A 32-bit unsigned integer. The range is 0 through 4294967295 decimal.</td></tr><tr><td align="center"><strong>WORD</strong></td><td align="center">unsigned short</td><td align="center">typedef unsigned short WORD</td><td align="center">A 16-bit unsigned integer. The range is 0 through 65535 decimal.</td></tr><tr><td align="center"><strong>BYTE</strong></td><td align="center">unsigned char</td><td align="center">typedef unsigned char BYTE</td><td align="center">A byte (8 bits).</td></tr><tr><td align="center"><strong>BOOLEAN</strong></td><td align="center">BYTE</td><td align="center">typedef BYTE BOOLEAN</td><td align="center">A Boolean variable (should be <strong>TRUE</strong> or <strong>FALSE</strong>).</td></tr><tr><td align="center"><strong>LPSTR</strong></td><td align="center">CHAR *</td><td align="center">typedef CHAR *LPSTR</td><td align="center">A pointer to a null-terminated string of 8-bit Windows (ANSI) characters. For more information, see <a href="https://docs.microsoft.com/windows/desktop/gdi/character-sets-used-by-fonts" target="_blank" rel="noopener">Character Sets Used By Fonts</a>.</td></tr><tr><td align="center"><strong>LPTSTR</strong></td><td align="center">CHAR* /WCHAR*</td><td align="center">#ifdef UNICODE<br> typedef LPWSTR LPTSTR;<br>#else<br> typedef LPSTR LPTSTR;<br>#endif</td><td align="center">An <a href="https://docs.microsoft.com/zh-cn/windows/win32/winprog/windows-data-types#lpwstr" target="_blank" rel="noopener"><strong>LPWSTR</strong></a> if <strong>UNICODE</strong> is defined, an <a href="https://docs.microsoft.com/zh-cn/windows/win32/winprog/windows-data-types#lpstr" target="_blank" rel="noopener"><strong>LPSTR</strong></a> otherwise. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Intl/windows-data-types-for-strings" target="_blank" rel="noopener">Windows Data Types for Strings</a>.</td></tr><tr><td align="center"><strong>LPWSTR</strong></td><td align="center">WCHAR *</td><td align="center">typedef CONST WCHAR *LPCWSTR</td><td align="center">A pointer to a constant null-terminated string of 16-bit Unicode characters. For more information, see <a href="https://docs.microsoft.com/windows/desktop/gdi/character-sets-used-by-fonts" target="_blank" rel="noopener">Character Sets Used By Fonts</a>.</td></tr><tr><td align="center"><strong>LPCSTR</strong></td><td align="center">CONST CHAR *</td><td align="center">typedef __nullterminated CONST CHAR *LPCSTR</td><td align="center">A pointer to a constant null-terminated string of 8-bit Windows (ANSI) characters. For more information, see <a href="https://docs.microsoft.com/windows/desktop/gdi/character-sets-used-by-fonts" target="_blank" rel="noopener">Character Sets Used By Fonts</a>.</td></tr><tr><td align="center"><strong>LPCTSTR</strong></td><td align="center">略</td><td align="center">略</td><td align="center">略</td></tr><tr><td align="center"><strong>LPCWSTR</strong></td><td align="center">略</td><td align="center">略</td><td align="center">略</td></tr></tbody></table><p>更多请参考<a href="https://docs.microsoft.com/zh-cn/windows/win32/winprog/windows-data-types" target="_blank" rel="noopener">Windows Data Types</a>。有几个，我会单独讲讲。</p><h4 id="HINSTANCE"><a href="#HINSTANCE" class="headerlink" title="HINSTANCE"></a>HINSTANCE</h4><p>一个模块代表的是一个运行中的exe文件或dll文件，用来代表这个文件中所有的代码和资源，磁盘上的文件不是模块，装入内存后运行时就叫做模块。一个应用程序调用其他DLL中的API时，这些DLL文件被装入内存，就产生了不同的模块，为了区分地址空间中的不同模块，每个模块都有一个惟一的模块句柄来标识。Win16，Win16中不同运行程序的地址空间并非是完全隔离的，一个可执行文件运行后形成”模块”，多次加载同一个可执行文件时，这个”模块”是公用的，为了区分多次加载的”拷贝”，就把每个”拷贝”叫做实例，每个实例均用不同的”实例句柄”（hInstance）值来标识它们。但在Win32中，程序运行时是隔离的，每个实例都使用自己私有的4 GB空间，都认为自己是惟一的，不存在一个模块的多个实例的问题，实际上在Win32中，实例句柄就是模块句柄，但很多API原型中用到模块句柄的时候使用的名称还是沿用hInstance，所以我们还是把变量名称取为hInstance。</p><h4 id="HANDLE"><a href="#HANDLE" class="headerlink" title="HANDLE"></a>HANDLE</h4><p>随着分析的深入，句柄（handle）一词也出现得频繁起来，”句柄”是什么呢？句柄只是一个数值而已，它的值对程序来说是没有意义的，它只是Windows用来表示各种资源的编号而已，可见只有Windows才知道怎么使用它来引用各种资源。</p><p>下面举例说明。屏幕上已经有10个窗口，Windows把它们从1到10编号，应用程序又建立了一个窗口，现在Windows把它编号为11，然后把11当做窗口句柄返回给应用程序，应用程序并不知道11代表的是什么，但在操作窗口的时候，把11当做句柄传给Windows，Windows自然可以根据这个数值查出是哪个窗口。当该窗口关闭的时候，11这个编号作废。第二次运行的时候，如果屏幕上现有5个窗口，那么现在句柄可能就是6了，所以，应用程序并不用关心句柄的具体数值是多少。打个比方，可以把句柄当做是商场中寄放书包时营业员给的纸条，纸条上的标记用户并不知道是什么意思，但把它交还给营业员的时候，她自然会找到正确的书包。</p><p>Windows中几乎所有的东西都是用句柄来标识的，文件句柄、窗口句柄、线程句柄和模块句柄等，同样道理，不必关心它们的值究竟是多少，拿来用就是了！</p><p>原文链接：<a href="https://blog.csdn.net/a199228/java/article/details/6622548" target="_blank" rel="noopener">模块句柄（实例句柄）和句柄的区别</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初识解释型语言，编译语言和脚本语言。</title>
      <link href="/hexo/2020/02/17/different-types-of-planguages/"/>
      <url>/hexo/2020/02/17/different-types-of-planguages/</url>
      
        <content type="html"><![CDATA[<h2 id="初始解释型语言，编译语言和脚本语言。"><a href="#初始解释型语言，编译语言和脚本语言。" class="headerlink" title="初始解释型语言，编译语言和脚本语言。"></a>初始解释型语言，编译语言和脚本语言。</h2><p>为什么说是初识呢？因为我也只是知道一点点也还在学习之中。</p><h4 id="本篇博客和动态语言，静态语言无关。请不要把概念搞混。"><a href="#本篇博客和动态语言，静态语言无关。请不要把概念搞混。" class="headerlink" title="本篇博客和动态语言，静态语言无关。请不要把概念搞混。"></a>本篇博客和动态语言，静态语言无关。请不要把概念搞混。</h4><p>下面我们先看一下wiki的解释</p><pre><code>编译语言（英语：Compiled language）是一种编程语言类型，通过编译器来实现。它不像解释型语言一样，由解释器将代码一句一句运行，而是以编译器，先将代码编译为机器代码，再加以运行。如C/C++。解释型语言（英语：Interpreted language）是一种编程语言类型。这种类型的编程语言，会将代码一句一句直接运行，不需要像编译语言（Compiled language）一样，经过编译器先行编译为机器代码，之后再运行。这种编程语言需要利用解释器，在运行期，动态将代码逐句解释（interpret）为机器代码，或是已经预先编译为机器代码的的子程序，之后再运行。如Python。</code></pre><p>理论上，任何编程语言都可以是编译式，或解释型的。它们之间的区别，仅是编译器和解释器的区别。像C语言，他有像gcc或者clang这样的编译器，但是他也可以被TCC解释。许多编程语言同时采用编译器与解释器来实现，其中包括Lisp，Pascal，C，BASIC 与 Python。JAVA及C#采用混合方式，先将代码编译为字节码，在运行时再进行解释。</p><p>编译语言和解释型语言是两个相对的概念，那么什么是脚本语言呢？我们再来看一下wiki。</p><pre><code>脚本语言（英语：Scripting language）是为了缩短传统的“编写、编译、链接、运行”（edit-compile-link-run）过程而创建的计算机编程语言。早期的脚本语言经常被称为批处理语言或工作控制语言。一个脚本通常是解释运行而非编译。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序员快速完成程序的编写工作。而宏语言则可视为脚本语言的分支，两者也有实质上的相同之处。虽然许多脚本语言都超越了计算机简单任务自动化的领域，成熟到可以编写精巧的程序，但仍然还是被称为脚本。几乎所有计算机系统的各个层次都有一种脚本语言。包括操作系统层，如计算机游戏，网络应用程序，字处理文档，网络软件等。在许多方面，高级编程语言和脚本语言之间互相交叉，二者之间没有明确的界限。</code></pre><p>我们可以说脚本语言是解释型语言的一种子集。</p><p>现在的脚本语言主要分成这几种</p><p>脚本语言分类</p><pre><code>1. 工作控制语言和shell -bash,sh,zsh2. GUI脚本 -AutoHotkey,Autolt3. 应用程序定制的脚本语言 -VBS4. WEB编程脚本 -Lasso5. 文本处理语言 -Perl6. 通用动态语言 -Perl,PHP,Python,Ruby,Scheme7. 扩展/可嵌入语言 -ECMAScript亦称DMDScript,JavaScript,Lua8. 其它 -Groovy</code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><a href="https://zh.wikipedia.org/wiki/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80</a><br><a href="https://blog.csdn.net/DaJian35/article/details/81368548" target="_blank" rel="noopener">https://blog.csdn.net/DaJian35/article/details/81368548</a><br><a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80</a><br><a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80</a><br><a href="https://blog.csdn.net/c80486/article/details/43370603" target="_blank" rel="noopener">https://blog.csdn.net/c80486/article/details/43370603</a></p><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS初识</title>
      <link href="/hexo/2020/02/17/JS/"/>
      <url>/hexo/2020/02/17/JS/</url>
      
        <content type="html"><![CDATA[<h1 id="JS初识"><a href="#JS初识" class="headerlink" title="JS初识"></a>JS初识</h1><p>为什么我会写这篇blog呢？这件事还是要从一个游戏说起。近日，新学期伊始。闲的没事干就随便下了一个游戏。游戏确实有意思但是有点单调，于是想能不能写个脚本来挂机。以前我也写过游戏脚本，在这方面还是有点经验。找了一会找到个开源的软件<a href="https://hyb1996.github.io/AutoJs-Docs/#/" target="_blank" rel="noopener">AutoJS</a>。照葫芦画瓢的就把脚本写完了。之后我就开始思考，这个AutoJS是怎么实现的呢？于是就有了这篇文章。</p><p>基础知识和不需要过多关注的知识我就不说了可以自行Google或者看我的<a href>Blog</a>。下面我会罗列一下预备知识。</p><ol><li>什么是JS</li><li>什么是ES</li><li>解释型语言，编译语言和脚本语言</li></ol><p>按照AutoJS的文档所说Auto.js使用JavaScript作为脚本语言，目前使用Rhino 1.7.7.2作为脚本引擎，支持ES5与部分ES6特性。这就引出了我们的第一个问题。<code>什么是脚本引擎？</code></p><ol><li><h2 id="脚本引擎"><a href="#脚本引擎" class="headerlink" title="脚本引擎"></a>脚本引擎</h2><p> 脚本引擎，就是一个计算机编程语言的解释器，如用于建网站的asp、php等，它的功能是解释执行用户的程序文本，将它译成计算机能执行的机器代码，完成一系列的功能(摘自百度百科)。也就是说脚本引擎就是解释器。下面是常见的JS引擎。</p><ol><li>Rhino，由Mozilla基金会管理，开放源代码，完全以Java编写。</li><li>SpiderMonkey，第一款JavaScript引擎，早期用于Netscape Navigator，现时用于Mozilla Firefox。</li><li>V8，开放源代码，由Google丹麦开发，是Google Chrome的一部分。C++开发</li><li>JavaScriptCore，开放源代码，用于Safari。</li></ol></li></ol><p>解释了这些东西我们大概可以搞懂了AutoJS的原理了。首先它是一个安卓应用，所以它是由Java开发的，要使AutoJS有处理脚本语言的功能所以加入了由Java开发的Rhino。整个项目应该分为2个部分，第一个是应用的框架，像是图像界面啊之类的；另一部分是AutoJS的核心即基于Rhino,解析js脚本并调用Java函数的部分。</p><p>其实到这就差不多了，还有一个重要概念就是runtime这个由于我写这篇博客时已经是深夜了，我就不阐述了。感兴趣的同学可以看<a href="https://zhuanlan.zhihu.com/p/104333176" target="_blank" rel="noopener">这篇博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派记5</title>
      <link href="/hexo/2019/12/22/raspberrypi-5/"/>
      <url>/hexo/2019/12/22/raspberrypi-5/</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派记5-控制LED进阶篇"><a href="#树莓派记5-控制LED进阶篇" class="headerlink" title="树莓派记5 (控制LED进阶篇)"></a>树莓派记5 (控制LED进阶篇)</h2><p>干，为什么我一天要写两篇技术博客啊，英语博客都没怎么勤。</p><p>这篇大量借鉴芒果大大的<a href="http://blog.mangolovecarrot.net/" target="_blank" rel="noopener">博客</a></p><ol><li>控制LED闪烁</li><li>LED呼吸灯</li><li>控制RGB LED</li></ol><h3 id="1-控制LED闪烁"><a href="#1-控制LED闪烁" class="headerlink" title="1. 控制LED闪烁"></a>1. 控制LED闪烁</h3><p><strong><a title="發光二極管. (2019, November 16). Retrieved from 维基百科, 自由的百科全书: https://zh.wikipedia.org/w/index.php?title=%E7%99%BC%E5%85%89%E4%BA%8C%E6%A5%B5%E7%AE%A1&oldid=56894199" href="https://zh.wikipedia.org/w/index.php?title=%E7%99%BC%E5%85%89%E4%BA%8C%E6%A5%B5%E7%AE%A1&oldid=56894199" target="_blank">发光原理：与其它二极管一样，发光二极管中电流可以轻易地从p极（阳极）流向n极（阴极），而相反方向则不能。两种不同的载流子：空穴和电子在不同的电极电压作用下从电极流向p、n架构。当空穴和电子相遇而产生复合，电子会跌落到较低的能阶，同时以光子的模式释放出能量（光子也即是我们常称呼的光）。</a></strong></p><p>因为LED需要3-3.3V的光才可以点亮，所以我只要把GPIO从高电平(&gt;3.5V)设置到低电平(&lt;0.4V)LED就会灭。</p><p>线路：</p><embed id="embed" src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-29-22.svg" type="image/svg+xml"><p>代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">import RPi.GPIO</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 指定GPIO口的选定模式为GPIO引脚编号模式（而非主板编号模式）</span><br><span class="line">RPi.GPIO.setmode(RPi.GPIO.BCM)</span><br><span class="line"></span><br><span class="line"># 指定GPIO14（就是LED长针连接的GPIO针脚）的模式为输出模式</span><br><span class="line"># 如果上面GPIO口的选定模式指定为主板模式的话，这里就应该指定8号而不是14号。</span><br><span class="line">RPi.GPIO.setup(14, RPi.GPIO.OUT)</span><br><span class="line"></span><br><span class="line"># 循环10次</span><br><span class="line">for i in range(0, 10):</span><br><span class="line">        # 让GPIO14输出高电平（LED灯亮）</span><br><span class="line">        RPi.GPIO.output(14, True)</span><br><span class="line">        # 持续一段时间</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line">        # 让GPIO14输出低电平（LED灯灭）</span><br><span class="line">        RPi.GPIO.output(14, False)</span><br><span class="line">        # 持续一段时间</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line"># 最后清理GPIO口（不做也可以，建议每次程序结束时清理一下，好习惯）</span><br><span class="line">RPi.GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>效果：</p><p><video controls name="media" width="75%" height="75%"><source src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-52-40.mp4" type="video/mp4"></video></p><h3 id="2-LED呼吸灯"><a href="#2-LED呼吸灯" class="headerlink" title="2. LED呼吸灯"></a>2. LED呼吸灯</h3><p><strong><a title="http://blog.mangolovecarrot.net/" href="http://blog.mangolovecarrot.net/ " target="_blank">原理说明:<br>我们知道，通过LED的电流越大，LED越亮，电流越小，LED越暗。如果可以控制输出电流大小就可以控制LED的明暗了。<br>但是树莓派的各引脚并没有直接调整输出电流大小的功能。要想别的办法。</a></strong></p><p><strong><a title="http://blog.mangolovecarrot.net/" href="http://blog.mangolovecarrot.net/ " target="_blank"><br>我们先学习一个名词：脉宽调制（PWM）<br>简单的说，PWM技术就是不停的通断电路并控制通断持续的时间片段长度来控制用电器在单位时间内实际得到的电能。</a></strong></p><p><strong><a title="http://blog.mangolovecarrot.net/" href="http://blog.mangolovecarrot.net/ " target="_blank"></a></strong></p><p>这么说好像还是复杂了，再简单点说，如果你的手足够快，打开电灯开关后马上关闭，如果这个时间间隔足够短，灯丝还没有全部亮起来就暗下去了。你再次打开电灯再关闭，再打开再关闭。。。如果你一直保持相同的频率，那么电灯应该会保持一个固定的亮度不变。理论上，你可以通过调整开灯持续的时间长度和关灯持续的时间长度的比例就能得到不同亮度了。这个比例被称为“占空比”。</p><p><strong><a title="http://blog.mangolovecarrot.net/" href="http://blog.mangolovecarrot.net/ " target="_blank"><br>PWM就是差不多这个意思。<br>树莓派1代B型的26个针脚里，有一个特殊的GPIO口是支持硬件PWM的，不过从B+开始不知道什么原因这个很实用的接口被去掉了。</a></strong></p><p><strong><a title="http://blog.mangolovecarrot.net/" href="http://blog.mangolovecarrot.net/ " target="_blank"><br>但是没关系，根据我上面的描述，我们完全可以自己写一个程序来模拟PWM。<br>不想自己写，没关系，我们强大的GPIO库已经帮我们写好了，直接用就可以了。</a></strong></p><p>连接不变，改代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">import RPi.GPIO</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 指定GPIO口的选定模式为GPIO引脚编号模式（而非主板编号模式）</span><br><span class="line">RPi.GPIO.setmode(RPi.GPIO.BCM)</span><br><span class="line"></span><br><span class="line"># 指定GPIO14（就是LED长针连接的GPIO针脚）的模式为输出模式</span><br><span class="line"># 如果上面GPIO口的选定模式指定为主板模式的话，这里就应该指定8号而不是14号。</span><br><span class="line">RPi.GPIO.setup(14, RPi.GPIO.OUT)</span><br><span class="line"></span><br><span class="line"># 循环10次</span><br><span class="line">for i in range(0, 10):</span><br><span class="line">        # 让GPIO14输出高电平（LED灯亮）</span><br><span class="line">        RPi.GPIO.output(14, True)</span><br><span class="line">        # 持续一段时间</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line">        # 让GPIO14输出低电平（LED灯灭）</span><br><span class="line">        RPi.GPIO.output(14, False)</span><br><span class="line">        # 持续一段时间</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line"></span><br><span class="line"># 最后清理GPIO口（不做也可以，建议每次程序结束时清理一下，好习惯）</span><br><span class="line">RPi.GPIO.cleanup()</span><br><span class="line">pi@raspberrypi:~/GPIO $ cat LED2.py</span><br><span class="line">import RPi.GPIO</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">RPi.GPIO.setmode(RPi.GPIO.BCM)</span><br><span class="line">RPi.GPIO.setup(12, RPi.GPIO.OUT)</span><br><span class="line"></span><br><span class="line"># 创建一个 PWM 实例，需要两个参数，第一个是GPIO端口号，这里我们用14号</span><br><span class="line"># 第二个是频率（Hz），频率越高LED看上去越不会闪烁，相应对CPU要求就越高，设置合适的值就可以</span><br><span class="line">pwm = RPi.GPIO.PWM(12, 80)</span><br><span class="line"></span><br><span class="line"># 启用 PWM，参数是占空比，范围：0.0 &lt;= 占空比 &gt;= 100.0</span><br><span class="line">pwm.start(0)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    while True:</span><br><span class="line">        # 电流从小到大，LED由暗到亮</span><br><span class="line">        for i in range(0, 101, 1):</span><br><span class="line">            # 更改占空比，</span><br><span class="line">            pwm.ChangeDutyCycle(i)</span><br><span class="line">            time.sleep(.02)</span><br><span class="line"></span><br><span class="line">        # 再让电流从大到小，LED由亮变暗</span><br><span class="line">        for i in range(100, -1, -1):</span><br><span class="line">            pwm.ChangeDutyCycle(i)</span><br><span class="line">            time.sleep(.02)</span><br><span class="line"></span><br><span class="line"># 最后一段是一个小技巧。这个程序如果不强制停止会不停地执行下去。</span><br><span class="line"># 而Ctrl+C强制终端程序的话，GPIO口又没有机会清理。</span><br><span class="line"># 加上一个try except 可以捕捉到Ctrl+C强制中断的动作，</span><br><span class="line"># 试图强制中断时，程序不会马上停止而是会先跳到这里来做一些你想做完的事情，比如清理GPIO口。</span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 停用 PWM</span><br><span class="line">pwm.stop()</span><br><span class="line"></span><br><span class="line"># 清理GPIO口</span><br><span class="line">RPi.GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>效果：</p><p><video controls name="media" width="75%" height="75%"><source src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-51-20.mp4" type="video/mp4"></video></p><h3 id="3-控制RGB-LED"><a href="#3-控制RGB-LED" class="headerlink" title="3. 控制RGB LED"></a>3. 控制RGB LED</h3><p>首先，我这里的RGP LED是灯管，不是模块。 其次要分清楚你的灯管是共阴的还是共阳的。市面上大部分是共阴的。也就是说长脚连地(GND)。</p><p>电路图：<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-23-00-24-99.svg" class="lazyload"><br>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">import RPi.GPIO</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">R,G,B=17,27,22</span><br><span class="line"></span><br><span class="line">RPi.GPIO.setmode(RPi.GPIO.BCM)</span><br><span class="line"></span><br><span class="line">RPi.GPIO.setup(R, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(G, RPi.GPIO.OUT)</span><br><span class="line">RPi.GPIO.setup(B, RPi.GPIO.OUT)</span><br><span class="line"></span><br><span class="line">pwmR = RPi.GPIO.PWM(R, 70)</span><br><span class="line">pwmG = RPi.GPIO.PWM(G, 70)</span><br><span class="line">pwmB = RPi.GPIO.PWM(B, 70)</span><br><span class="line"></span><br><span class="line">pwmR.start(0)</span><br><span class="line">pwmG.start(0)</span><br><span class="line">pwmB.start(0)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line"></span><br><span class="line">    t = 0.4</span><br><span class="line">    while True:</span><br><span class="line">        # 红色灯全亮，蓝灯，绿灯全暗（红色）</span><br><span class="line">        pwmR.ChangeDutyCycle(0)</span><br><span class="line">        pwmG.ChangeDutyCycle(100)</span><br><span class="line">        pwmB.ChangeDutyCycle(100)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 绿色灯全亮，红灯，蓝灯全暗（绿色）</span><br><span class="line">        pwmR.ChangeDutyCycle(100)</span><br><span class="line">        pwmG.ChangeDutyCycle(0)</span><br><span class="line">        pwmB.ChangeDutyCycle(100)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 蓝色灯全亮，红灯，绿灯全暗（蓝色）</span><br><span class="line">        pwmR.ChangeDutyCycle(100)</span><br><span class="line">        pwmG.ChangeDutyCycle(100)</span><br><span class="line">        pwmB.ChangeDutyCycle(0)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 红灯，绿灯全亮，蓝灯全暗（黄色）</span><br><span class="line">        pwmR.ChangeDutyCycle(0)</span><br><span class="line">        pwmG.ChangeDutyCycle(0)</span><br><span class="line">        pwmB.ChangeDutyCycle(100)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 红灯，蓝灯全亮，绿灯全暗（洋红色）</span><br><span class="line">        pwmR.ChangeDutyCycle(0)</span><br><span class="line">        pwmG.ChangeDutyCycle(100)</span><br><span class="line">        pwmB.ChangeDutyCycle(0)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 绿灯，蓝灯全亮，红灯全暗（青色）</span><br><span class="line">        pwmR.ChangeDutyCycle(100)</span><br><span class="line">        pwmG.ChangeDutyCycle(0)</span><br><span class="line">        pwmB.ChangeDutyCycle(0)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 红灯，绿灯，蓝灯全亮（白色）</span><br><span class="line">        pwmR.ChangeDutyCycle(0)</span><br><span class="line">        pwmG.ChangeDutyCycle(0)</span><br><span class="line">        pwmB.ChangeDutyCycle(0)</span><br><span class="line">        time.sleep(t)</span><br><span class="line"></span><br><span class="line">        # 调整红绿蓝LED的各个颜色的亮度组合出各种颜色</span><br><span class="line">        for r in range (0, 101, 20):</span><br><span class="line">            pwmR.ChangeDutyCycle(r)</span><br><span class="line">            for g in range (0, 101, 20):</span><br><span class="line">                pwmG.ChangeDutyCycle(g)</span><br><span class="line">                for b in range (0, 101, 20):</span><br><span class="line">                    pwmB.ChangeDutyCycle(b)</span><br><span class="line">                    time.sleep(0.01)</span><br><span class="line"></span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">pwmR.stop()</span><br><span class="line">pwmG.stop()</span><br><span class="line">pwmB.stop()</span><br><span class="line"></span><br><span class="line">RPi.GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>效果：</p><p><video name="media" width="75%" height="75%" controls><source src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-48-08.mp4" type="video/mp4"></video></p><p>终于写完了。累死了，果然晚上有灵感。已经0:26了。圣诞节的树莓派内容应该已经完结了。完结撒花，我睡觉去了。</p>]]></content>
      
      
      <categories>
          
          <category> Raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派记4</title>
      <link href="/hexo/2019/12/22/raspberrypi-4/"/>
      <url>/hexo/2019/12/22/raspberrypi-4/</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派记4"><a href="#树莓派记4" class="headerlink" title="树莓派记4"></a>树莓派记4</h2><p>这个星期抽空摸鱼也加了不少功能。</p><ol><li>Samba</li><li>Putty密钥登陆, 配色, 高分屏</li><li>开机自启frp </li><li>更新Chromium</li><li>修改时区，以矫正时间</li></ol><h3 id="1-SAMBA"><a href="#1-SAMBA" class="headerlink" title="1.SAMBA"></a>1.SAMBA</h3><p><strong><a title="Samba. (2019, December 21). Retrieved from 维基百科, 自由的百科全书: https://zh.wikipedia.org/w/index.php?title=Samba&oldid=57352224" href="https://zh.wikipedia.org/w/index.php?title=Samba&oldid=57352224" target="_blank">Samba，是种用来让UNIX系列的操作系统与微软Windows操作系统的SMB/CIFS（Server Message Block/Common Internet File System）网络协议做链接的自由软件。第三版不仅可访问及分享SMB的文件夹及打印机，本身还可以集成入Windows Server的网域，扮演为网域控制站（Domain Controller）以及加入Active Directory成员。简而言之，此软件在Windows与UNIX系列操作系统之间搭起一座桥梁，让两者的资源可互通有无。</a></strong></p><ol><li><p>安装smb</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure></li><li><p>备份<code>smb.conf</code> </p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br></pre></td></tr></table></figure></li><li><p>修改<code>smb.conf</code></p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure><p> 找到文件末尾添加如下</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[配置名]</span><br><span class="line">comment = my share directory</span><br><span class="line">path = 共享文件夹路径</span><br><span class="line">browseable = yes</span><br><span class="line">writeable = yes</span><br><span class="line">guestok = no</span><br></pre></td></tr></table></figure><p> <img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-21-31-66.png" class="lazyload"><br> 如果不想把home目录也共享出去的话可以把上面的都注释掉<br> <img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-21-37-57.png" class="lazyload"></p></li><li><p>增加samba用户</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo smbpasswd -a pi (linux用户名, 树莓派默认是pi)</span><br></pre></td></tr></table></figure><p> 输入密码即可。</p></li><li><p>重启samba</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service smbd restart</span><br></pre></td></tr></table></figure></li><li><p>测试<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-21-42-75.png" class="lazyload"></p></li></ol><h3 id="2-Putty密钥登陆-配色-高分屏问题"><a href="#2-Putty密钥登陆-配色-高分屏问题" class="headerlink" title="2. Putty密钥登陆, 配色, 高分屏问题"></a>2. Putty密钥登陆, 配色, 高分屏问题</h3><p>我现在用的是Putty虽然我也有Xshell但是奈何电脑配置不行，用Xshell做不到秒启动。但是用Putty每次ssh登录都要输密码确实麻烦，设置一个密钥会方便的多。</p><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><ol><li><p>打开PuTTYgen生成一个密钥。安装putty的话会自动安装，去安装目录即可找到。<br><img alt="Save private key" data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-21-49-38.png" class="lazyload"><br>生成完保存私钥，复制公钥。</p></li><li><p>SSH到树莓派，编辑ssh文件</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p> 没有的话创建一个，把公钥粘贴进去，保存退出。</p></li><li><p>打开Putty<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-21-54-66.png" class="lazyload"><br>设置 <code>Auto-login username</code><br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-21-55-93.png" class="lazyload"><br>设置私钥路径。之后记得保存设置。</p><h4 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h4><p>Putty原本的配色真是辣眼睛。网上找了一个温和点的配色。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\Default%20Settings]</span><br><span class="line">&quot;UseSystemColours&quot;=dword:00000000</span><br><span class="line">&quot;TryPalette&quot;=dword:00000000</span><br><span class="line">&quot;ANSIColour&quot;=dword:00000001</span><br><span class="line">&quot;Xterm256Colour&quot;=dword:00000001</span><br><span class="line">&quot;BoldAsColour&quot;=dword:00000001</span><br><span class="line">&quot;Colour0&quot;=&quot;211,215,207&quot;</span><br><span class="line">&quot;Colour1&quot;=&quot;238,238,236&quot;</span><br><span class="line">&quot;Colour2&quot;=&quot;46,52,54&quot;</span><br><span class="line">&quot;Colour3&quot;=&quot;46,52,54&quot;</span><br><span class="line">&quot;Colour4&quot;=&quot;0,0,0&quot;</span><br><span class="line">&quot;Colour5&quot;=&quot;0,255,0&quot;</span><br><span class="line">&quot;Colour6&quot;=&quot;46,52,54&quot;</span><br><span class="line">&quot;Colour7&quot;=&quot;85,87,83&quot;</span><br><span class="line">&quot;Colour8&quot;=&quot;204,0,0&quot;</span><br><span class="line">&quot;Colour9&quot;=&quot;239,41,41&quot;</span><br><span class="line">&quot;Colour10&quot;=&quot;78,154,6&quot;</span><br><span class="line">&quot;Colour11&quot;=&quot;138,226,52&quot;</span><br><span class="line">&quot;Colour12&quot;=&quot;196,160,0&quot;</span><br><span class="line">&quot;Colour13&quot;=&quot;252,233,79&quot;</span><br><span class="line">&quot;Colour14&quot;=&quot;52,101,164&quot;</span><br><span class="line">&quot;Colour15&quot;=&quot;114,159,207&quot;</span><br><span class="line">&quot;Colour16&quot;=&quot;117,80,123&quot;</span><br><span class="line">&quot;Colour17&quot;=&quot;173,127,168&quot;</span><br><span class="line">&quot;Colour18&quot;=&quot;6,152,154&quot;</span><br><span class="line">&quot;Colour19&quot;=&quot;52,226,226&quot;</span><br><span class="line">&quot;Colour20&quot;=&quot;211,215,207&quot;</span><br><span class="line">&quot;Colour21&quot;=&quot;238,238,236&quot;</span><br></pre></td></tr></table></figure></li></ol><p>复制代码，新建reg文件粘贴进去，运行即可。</p><h4 id="高分屏问题"><a href="#高分屏问题" class="headerlink" title="高分屏问题"></a>高分屏问题</h4><p>我的电脑是Surface，有一块高分屏看着确实很舒服，但是有些软件的字体会十分模糊。就像这样：<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-22-33-48.jpg" class="lazyload"><br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-22-34-55.jpg" class="lazyload"><br>曾经看到我一度怀疑自己是不是。。。</p><p>但是只要找到软件右击-属性-兼容性-更改高DPI设置-缩放-系统(增强)<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-22-38-09.png" class="lazyload"><br>之后画面就清楚多了。</p><p><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-22-34-72.jpg" class="lazyload"><br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-22-34-27.jpg" class="lazyload"></p><h3 id="3-开机自启frp"><a href="#3-开机自启frp" class="headerlink" title="3. 开机自启frp"></a>3. 开机自启frp</h3><p>这个我之前就设置过，不过不知道为什么没有效果。最后找到了原因。是因为刚开机是并没有网络，frp会代理失败，于是写了个脚本。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">cd /home/pi/frp</span><br><span class="line">while :</span><br><span class="line">do</span><br><span class="line">        ping -c 1 114.114.114.114 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        if [ $? -eq 0 ];then</span><br><span class="line">                 break</span><br><span class="line">        fi #检测是否连接上网</span><br><span class="line">done</span><br><span class="line">nohup /home/pi/frp/frp_0.30.0_linux_arm/frpc -c /home/pi/frp/frp_0.30.0_linux_arm/frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>开机自启这个脚本就好了。</p><h3 id="4-更新Chromium"><a href="#4-更新Chromium" class="headerlink" title="4. 更新Chromium"></a>4. 更新Chromium</h3><p>由于Selenium需要webdriver所以就顺手更新一下Chromium。</p><ol><li>下载最新安装包。下载时注意选armhf的<ul><li><a href="https://packages.debian.org/stable/web/chromium" target="_blank" rel="noopener">Chromium</a></li><li><a href="https://packages.debian.org/stable/web/chromium-common" target="_blank" rel="noopener">安装依赖</a></li><li><a href="https://packages.debian.org/buster/chromium-l10n" target="_blank" rel="noopener">语言包</a></li><li><a href="https://packages.debian.org/stable/web/chromium-driver" target="_blank" rel="noopener">WebDriver</a></li></ul></li></ol><p>下载时注意选armhf的</p><ol start="2"><li>分别安装chromium-common，Chromium，语言包，WebDriver(若只升级浏览器，可不安装webdriver)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i 包名.deb</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-修改时间"><a href="#5-修改时间" class="headerlink" title="5. 修改时间"></a>5. 修改时间</h3><p>在使用Python Time模块的时候发现时间不对，调查一下发现是因为时区不对，修改即可。</p><p>命令行输入 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-00-50.png" class="lazyload"></p><p><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-01-23.png" class="lazyload"></p><p><img alt="选择你的时区" data-src="https://storage.googleapis.com/peter-duan-blog/19-12-22-23-03-40.png" class="lazyload"></p><p>终于结束了，一周又过去了。马上就圣诞了。 Merry Christmas！</p>]]></content>
      
      
      <categories>
          
          <category> Raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fifth-English-Blog</title>
      <link href="/hexo/2019/12/19/Fifth-English-Blog/"/>
      <url>/hexo/2019/12/19/Fifth-English-Blog/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="726e58af4b312dd0765d5c42811c56892b12e83b98e5ebb951d44c901e6121f2">0e3eb292c209997b0d5d2b078790ee4b5977d804e6cea4b994b5bfdd1bad774ebef140d163dbceaab1d454d40edd710d9a5bfa266c3a5aa1e0b609b0a43fc3cf5196bc8f556f2f0619eacdfe443c6d52d30f2a5369ef6e32ccb82a8839b0ac8d47fd245eadc660369a354892d94d5786321c51ed1584fb12e5f70882d857f10468ee30ad8fb286f08254895f61c349056a796b0a8f65f456beee1b246c8fba0ba5efe23a9f796e5a8f81ca8976421b557d36a043de6cc74a649ac3261982468f3cdf086aab4a69c036e88df658c2a4777b76a9616197f55ab454937012a14cea2efc3fe24f35b94287ca2f693e9155e26fd11f795dbd24b7beef07983b2ad30581bd061ee8ba8ea023633ea1b3a8fdc34f91147ab07fc066bca70024e950cf8255f05d0350126fe887d29615ab247dc300ddbb5a35273dc9e0695adf0c0a94c4e5a5cdc11f5697c54873fb1c658308a0922233f91f103bc846c44da04085f4b05d52a4c9f2b6e3e03d56ffc48a6abdae957e80f77912a8badb902c93d1c8d2a0c0dd9265ea56e9529f88cc9a195ee46f7a85ac53496dc9820cf8e689d79bad9007b382c585de1d0a13a255cb22b742c51f6b0e4ead698e0d5674c8b00b61bd2ea4590be69cd8b1c143af535208c9ddc0853ce886ab868cf33f65b8b1942025225b1852eedb74553572e52ed299908ef794194b867b88aed0421b32a0b081220d5eb0daec38277858bc9586d579450e07dd15646eb6028d7750b37fef53fd3eb92ec9980a006dbe1349360181529a5610f801b4ae55196c3235d55c6abf3f309add698a26156a68d4787a93506a2501ab39a4de34a31e42adaccbc2590061865d52d79b4b63d85e47deceb927ef4de5a93f6ee5de102d3b6db2834d8ea17687d3f759f1bfb48c7534578fddd6b209b16d3570bd602e50e35018a6475a3606f03efbe3ae4cedc682a80cfca55d0056043c3ea81cde5e3b788bd45969f3ba4deebdf473f08a6ca58203982857109135f2b70393350c0915f42f8487ca5e11f87b0084181e9ac7d8010500508cf0914dc62cc776e74e16175c6a77f9ee23761736a407a653fd940655d6b53d1cc383ab69e0e8701142ff6564790805a47383cf2ae19cb227328eb367af7a080a5b234738e12ea90b75b3a4e1c4405a1c94d36a42fe26e07ed30233411f655353fd61ab03d82c2c3508cd3cd31d869cc4d4479c7b66148fa9a383aeda1fcc5bae31aef6ed464170c22293eb66a4f2c55cbdee36209afc4d632b0396563e876caf9bfc6c0e5d76beda0a3cc8c5f9b37a013e64f7db8671f2084495d0a0ba9341f0b57fbc57de6b3c84e300732d676fd4290d0904bc3b5d3b7eddf2d53d9e2f130a571e9d21a4aa84cac5eb9c25f2dec25719a61be14563a6b5108a5820de7122a3065384d6b15be974691540b67b80fa02f0557b9b6fba4b192fbf183f3ee69ee8dcf2f0c0794f861a80de35f970223f9a14689ea3bc1f9b8abcc2f97789edb24433d7010c27cb9a0ef37bbedfefca9bddbdaf94782ef358f3f100b4ce86de0a6b45a2909f2c491ff65ceb18c5985c87f34435b6fc213a300e4c8970f36d41c97d0ae6b1b50a6ab80924ae906dcbbad2d87a1d06e4ec41ede78df93303acb12a4381f1374b86e396e74fd6fe5d3c79e01d3358172e627e13a39d37d1cc0132f6e418bb3d3475e3ca74015c4c053d0b82e2027931423172948f3e864da692c9f02e2dcc2781a51dbc475fc16630c72ee7390e419f46ac43b1875165aca6294d72ff421052526ceb10be4c7c30e13c60385ccdf29ae3b1b68d72a7c58b43a9af739cc61c0f28affa98f6b37f9f7c083faa5a1aaec924de70ad4e3de71cc7c818636e86779b4d74ae09c3d6065c413040d9aa299f4119de9dacc9a3ffbf74326c7948102f33c08200d0b0786b94975ce2e1504693e294850f3d7242dfb27f83a2085b880655b834a8937389539d43ba448a871fe53dad15b6b7079964208aaeac205d6979eb6b79</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fourth-English-Blog</title>
      <link href="/hexo/2019/12/18/Fourth-English-Blog/"/>
      <url>/hexo/2019/12/18/Fourth-English-Blog/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="589b4c2c3263b827bcbd8acb55a4b323dc84af3668d67a4af4829b3deb5de3b5">3203ad31aca64d680746c7a7f02c40ced7376bd5ed90d6932ae8015a01d4f8a95d1ccf9f83a6bbcff2fba8fc3e9bff2c3403eb702c71364d23131457ba24c91db90692ded9c9758980738f05c389ca31eda1fe9c1e4b44f6d3ead20b4dc928e92172ce7a0abd2f63740a4fb3f98fe3340f9bae8b0a5af47b85600fdfeb874a96f3c21b6bbac9385e62ac28487d76a47f59e709cf99adfc9f5ec3e5c2ff3dafe50f206db4114fa1bffe1d875de3ab9c1e51bb5c3bfbef7de0b4a2b226fb5b24f96f415a67be2a4cf8db9ca30111f411ebe29f77948427360a88ebb238377dc9f3193fe934245b75390474c5a8741ea0b9f134c29a87e7dc3c415e9a022f77a4f74587466ed3223f6099aa2dfc367659dedc9bcd94556d46b47ab5145e6a4a196bfdc0e712f0a9c49a11ca8b1c8799c5ac4377c618ca727283f0a634dbbe32de027d7d084615c62047a21cb1d29e18ed15c934291d0086a3ce2930d1dc8a6d7212403ceb2606c472f90cda2a4b80a55001fc4b7fb32d2164a8370db597c2aa9f29043108bd580fa61469271d14c6cf69e955976f0182d240bb597e5aa74a4213a6aeda350c9b3bde099199d364a73187de11ce25694771c7d5f727ab86da304fbb223be7e8ea8af97a5f733b3e52d729604c6ed87d96ca3aa6df2d32904e605fc2af2b0e5846a3f3e3cf978a02d359a8ff791ce58f6189760ae5845f5f720fc7a046c73649fbf051136a5d97c103535bdc8813a7637a31b09e30ef0773a4f3e5a542dbc1c18c6bb2f3d2f2dfb92c43589a9eb6dd2075bc7f6955619b7d8cb0cbbb0105b918276f6536f7d363667327198f89b979b5b2e43ab2bf591e25e2755d69da13b50728ce994c72ba8c9c68c3d8f01e199adb7126d64713a9ef57d8be06dd889b379ffc1e3ef2072a0779945bdcae993794dfc1ff56c6574a04dbb8722d5eb93406bd8810d9089f9b5d9257ac1dceb5f3df8a416ef447d95e018afb8632a003d8bcf6c2a270a4050d4aaa410a3ff6d7cc51b3faf05e59bc72fd86c3fb8f702e0ccb9e632aa186f269517fb2cb68b81fd0101925dbdba2a6074072df8496ed290dba722866a60e72c38ea29cbda69b378b03f6477659650b22a9b6f117d7d9202cf07719c15075767d12092753618ff3bc4a3dd19e99ce1a11f96dd7a6c036f27241cdb866be460a803d490e0455222d26ae82b2ddc3f6039c8243dec57a0140398ab4fbfce96929ce978024c4ee8f9c08a43227ae933af2916d1fd67265f3778e8d262136c99b229ee3f1df20d8716053b09f0625f7794cde05a285b33c34d105b1f4a1d3b6ba84de775ee1cf9f435b28e071cd34d64ac44d6b633c7eeb51ff584b9031af6a85ade8e9d34508802219442dc28678f948dd67df5b365ef314e4a6755864860d60f5757807ae9ea940e07327f29201db7c1a17744ce249a378b97668cbeaa5c4366bf6e20e4eb28071784d60baf12c20b73b4714fca93ffcfc145ae41b7c017ae89359247be53cdd6bcf434ca07391d7e955f4a674d01e1ed1ef406b3dce0eb2d6582b6388a16663708220032a95e82e549ed82e518e81bc309b3c1eb3907b3fe42e6e3bf193d4ff918f7bcb11f6b40929043c488e3324bea7d31f4abab528deba46a374d27fa6590202b4a99b926ed30d1656a58a26b55e1f8834f56eaec1a706c28a6d2596fa8e2211189d07b41428b42c318fe365f6fa5cdeda05bc366e6f29dc3cd24a5227978a4d9c8ff1ba9585f15cd6502fa1979d2f1f86ab2ba16db1a26ae4b79403ac3cc6c2407695a9ce7507bc564e0bc9c47420abb7629d95b32629ec88b05cb4d6c8694b1be05e08896f15fd0ad7219c8786d071914b37cd4b17f702e0090f2b44edf0c50b36bcee82da29effde4d92863f9af97d2e95ca9d0cf26cbdf82cdec24d8853cbedb9d039f6b1c2cc7c49d981b585048d9ad1967397e9c7bcc54d51ba4d5dba0f989219a0f52d06821d52e1c3163c1e22774dbeed294c7338c166657b5bf8b395d3c0cfc61dc7f200cd36203dbd9272d250855a49cb212d14153e6739be4e0a89ea685695e8045798acdd6f7f80a17c10add21a981a28bfa62904fe858fe54c970004a7eeea08e60a7c025838b4ed60c720f3c5c6745cfa22297fb3cae7d7ffc828325f387b318af4131aae61ab56a737e683d0b15cbddd4b7b3f289f5f7285cf0701a287a6403c12679107a2802aa</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派记2</title>
      <link href="/hexo/2019/12/13/raspberrypi-2/"/>
      <url>/hexo/2019/12/13/raspberrypi-2/</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派记2"><a href="#树莓派记2" class="headerlink" title="树莓派记2"></a>树莓派记2</h2><p><del>不要问我为什么没有1</del></p><p>心心念念好久的树莓派终于到了。在拿到之后竟有些失落。不知为何，可能是少了那种期待，也可能是最近几天不知道为什么对任何事情都失去了激情。废话不多说，先写一下总结的技术要点吧。</p><ol><li>安装Raspbian</li><li>在无显示器，键盘鼠标的情况下如何SSH</li><li>换apt源</li><li>Xrdp实现Windows远程登陆树莓派桌面</li><li>FRP内网穿透</li></ol><h3 id="1-安装Raspbian"><a href="#1-安装Raspbian" class="headerlink" title="1. 安装Raspbian"></a>1. 安装Raspbian</h3><p>我买的树莓派套餐里给的SD卡里预装了NOOBS(给萌新装系统的工具，操作简单，适合新手)。 但是我又没有显示屏，所以只能选择自己装系统。</p><ol><li><p>将卡插入读卡器。</p></li><li><p>格式化SD卡，工具<a href="https://www.sdcard.org/downloads/formatter/eula_windows/index.html" target="_blank" rel="noopener">SD Card Formatter</a>。简单的格一下就好了。<br><img alt="SD Card Formatter" data-src="https://storage.googleapis.com/peter-duan-blog/19-12-13-23-28-87.png" class="lazyload"></p></li><li><p>下载镜像，<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">地址</a><br>建议新手下载这个<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-13-23-35-35.png" class="lazyload"></p></li><li><p>烧录系统，工具<a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">Win32DiskImage</a>。<img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-13-23-37-02.png" class="lazyload">选好磁盘，写入即可。烧完后磁盘背重命名成boot而且只有200多MB，正常现象不必惊慌。Windows可能会提醒你格式化已查看，不必理会，取消即可。</p></li></ol><h3 id="2-在无显示器，键盘鼠标的情况下如何ssh。"><a href="#2-在无显示器，键盘鼠标的情况下如何ssh。" class="headerlink" title="2. 在无显示器，键盘鼠标的情况下如何ssh。"></a>2. 在无显示器，键盘鼠标的情况下如何ssh。</h3><p>由于预算(<del>穷</del>)问题，我并没有买键鼠，显示屏。但是这点问题并不能难到我。</p><h4 id="方案一（推荐）："><a href="#方案一（推荐）：" class="headerlink" title="方案一（推荐）："></a>方案一（推荐）：</h4><ol><li><p>将卡插进读卡器。</p></li><li><p>找到boot目录，新建文件ssh(注意不要有后缀名)。</p></li><li><p>boot目录下新建wpa_supplicant.conf，按照下面的格式填入内容并保存wpa_supplicant.conf文件。</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;你的wifi名称&quot;</span><br><span class="line">    psk=&quot;你的wifi密码&quot;</span><br><span class="line">    priority=1 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>插电启动树莓派，Google Play安装NetX，扫描局域网，多出来的就是raspberry pi的ip。</p></li><li><p>用SSH连接树莓派 </p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh pi@raspberryip</span><br></pre></td></tr></table></figure><p> 默认用户名<code>pi</code> 默认密码：<code>raspberry</code>。 </p></li></ol><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><ol><li>将卡插入读卡器。</li><li>找到boot目录，新建文件ssh(注意不要有后缀名)</li><li>准备一条数据线，一头连到手机，另一头连树莓派USB。</li><li>打开手机的USB网络共享。</li><li>Google Play安装NetX，扫描局域网，多出来的就是raspberry pi的ip。</li><li>手机上安装JuiceSSH链接即可。默认用户名<code>pi</code> 默认密码：<code>raspberry</code>。 </li></ol><h3 id="3-换apt源"><a href="#3-换apt源" class="headerlink" title="3. 换apt源"></a>3. 换apt源</h3><p>出于地区限制，apt的速度会非常慢，这时换一个好的镜像就尤为重要。换镜像源是基本操作，不多赘述了。可参考<a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/raspbian/</a> </p><p>换完之后记得更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h3 id="4-Xrdp实现Windows远程登陆树莓派桌面"><a href="#4-Xrdp实现Windows远程登陆树莓派桌面" class="headerlink" title="4. Xrdp实现Windows远程登陆树莓派桌面"></a>4. Xrdp实现Windows远程登陆树莓派桌面</h3><p>之所以要安装Xrdp是因为，如果仅仅通过ssh连接树莓派是看不到图形界面的，想要看到的话可以通过VNC或其他远程桌面软件。选xrdp纯粹是为了方便，因为在任何Windows操作系统上可以用mstsc。</p><ol><li><p>安装Xrdp，执行如下命令</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure></li><li><p>安装VNC</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure></li><li><p>启动Xrdp</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/xrdp start</span><br></pre></td></tr></table></figure></li><li><p>开机自启</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-rc.d xrdp defaults</span><br></pre></td></tr></table></figure></li><li><p>打开mstsc (Win + R)，输入树莓派IP地址，点击连接。<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-14-00-10-00.png" class="lazyload">没错的话，就可以登上了<img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-14-00-11-32.png" class="lazyload"></p></li></ol><h3 id="5-FRP内网穿透"><a href="#5-FRP内网穿透" class="headerlink" title="5. FRP内网穿透"></a>5. FRP内网穿透</h3><p>大部分时候我们是不在局域网的，这时候我们就需要内网穿透。</p><ol><li><p>下载地址<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">Github</a></p></li><li><p>记得选择正确的版本，像我是Raspberry Pi 4B用的是armv7l所以我该选arm版的。</p></li><li><p>配置起来很简单，网上也有大把资料，不多赘述。<a href="https://github.com/fatedier/frp/blob/master/README_zh.md" target="_blank" rel="noopener">官方文档</a></p></li><li><p>将frp开机自启。 把</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen -S pi /home/pi/frp/frp_0.30.0_linux_arm/frpc -c /home/pi/frp/frp_0.30.0_linux_arm/frpc.ini</span><br></pre></td></tr></table></figure><p> 添加到<code>/etc/rc.local</code></p></li></ol><ol start="4"><li><p>常见问题：</p><ul><li><p><code>[W] [service.go:97] login to server failed: i/o deadline reached</code><br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-14-11-49-23.png" class="lazyload"><br>请下载相同版本的frp</p></li><li><p>如果拒绝访问，请让防火墙放行。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派记3</title>
      <link href="/hexo/2019/12/13/raspberrypi-3/"/>
      <url>/hexo/2019/12/13/raspberrypi-3/</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派记3"><a href="#树莓派记3" class="headerlink" title="树莓派记3"></a>树莓派记3</h2><p>拿到树莓派抽空做了个小电路实验。开关控制LED，虽然并没有GPIO的核心功能但是这是第一步。</p><p>材料：</p><ol><li>GPIO扩展板<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-47-80.jpg" class="lazyload"></li><li>40P排线<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-47-75.jpg" class="lazyload"></li><li>面包板<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-46-76.jpg" class="lazyload"></li><li>线材若干<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-46-25.jpg" class="lazyload"></li><li>若干LED</li><li>开关</li></ol><h3 id="1-什么是GPIO？"><a href="#1-什么是GPIO？" class="headerlink" title="1. 什么是GPIO？"></a>1. 什么是GPIO？</h3><p>GPIO (General-purpose input/output)… 懒得写，亲自行百科</p><p>这是Raspberry Pi 4B的GPIO的编号<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-14-23-42-91.png" class="lazyload"></p><h3 id="2-什么是面包板？"><a href="#2-什么是面包板？" class="headerlink" title="2. 什么是面包板？"></a>2. 什么是面包板？</h3><p>把这文件看完大概就了解什么叫面包板了</p><p><a href="https://storage.googleapis.com/peter-duan-blog/19-12-15-15-24-12.pdf" target="_blank" rel="noopener">面包板使用简介</a></p><p>其他我也懒得写。</p><h3 id="1-连接面包板"><a href="#1-连接面包板" class="headerlink" title="1. 连接面包板"></a>1. 连接面包板</h3><p>把树莓派连接到面包板可方便我们调试电路。</p><p>连接方法：</p><ol><li>将40P排线两端分别接到树莓派GPIO口和扩展版</li><li>将扩展版插到面包板上。 注意面包板方向以及正负极是否和T型扩展版的正负极一致。</li></ol><h3 id="2-连接电路"><a href="#2-连接电路" class="headerlink" title="2.连接电路"></a>2.连接电路</h3><p>按照下图连接电路。绘图软件为(Fritzing)<br><embed id="embed" src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-54-13.svg" type="image/svg+xml"></p><p>现实<br><img alt="2-1" data-src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-46-76.jpg" class="lazyload"></p><p>PS:</p><h4 id="1-LED不可以串联，故采用并联的方式。血的教训"><a href="#1-LED不可以串联，故采用并联的方式。血的教训" class="headerlink" title="1. LED不可以串联，故采用并联的方式。血的教训"></a>1. LED不可以串联，故采用并联的方式。血的教训</h4><p><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-24-20.jpg" class="lazyload"></p><h4 id="2-请注意面包板的上，下部分不要混着用，上图中（2-1）5V的电压输出请接到面包板的上面部分，也就是标有5V的那样一部分，千万不要接到3V3部分（冒烟⚠）。"><a href="#2-请注意面包板的上，下部分不要混着用，上图中（2-1）5V的电压输出请接到面包板的上面部分，也就是标有5V的那样一部分，千万不要接到3V3部分（冒烟⚠）。" class="headerlink" title="2. 请注意面包板的上，下部分不要混着用，上图中（2-1）5V的电压输出请接到面包板的上面部分，也就是标有5V的那样一部分，千万不要接到3V3部分（冒烟⚠）。"></a>2. 请注意面包板的上，下部分不要混着用，上图中（2-1）5V的电压输出请接到面包板的上面部分，也就是标有5V的那样一部分，千万不要接到3V3部分（冒烟⚠）。</h4><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><video controls name="media" width="75%" height="75%"><source src="https://storage.googleapis.com/peter-duan-blog/19-12-15-14-24-35.mp4" type="video/mp4"></video></p>]]></content>
      
      
      <categories>
          
          <category> Raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry pi </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Third-English-Blog</title>
      <link href="/hexo/2019/12/12/Third-English-Blog/"/>
      <url>/hexo/2019/12/12/Third-English-Blog/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6c2af2adb22ec82f797ba762add99746803b1969aaa7105d9411eb5eed679b3b">941ffc384b1edd8160bb420c237aac59047f41fbe71188bbc33e9cf03a71a27a8e510a84e059afa0705eef6fa162adad6455f82af19f16f90303b49526eaf7350100882ff2179d947677b63a455240428eb31dfb899e0bcc242351a619cd50ef4e3c557156d5de3e8d54186a15e63633141945c7db3919cbe60bcc1dd0d0c1317ceebcb0fe3bc120da69435570ad265bd5464afe6b5559895b5f3486847bb2c62ced8b7f1f6a110f4d4a484ef02d03733f892d5e5787d24fdb29839dd55b7a8e21f025883c3758b276ea37dbc8d28e2da483256e873f52faec6c53bece5d84a0400e1d01bf61e82811cb06b3b0c3a34ac6bac776c1f5bbfbd6ffddbfc97b8aacaf293fcc1f345e71458c8ccdebf05a64781d7622bca069636138c68652903e90a4201606297473c46ffa78d79d90e2896cdee728931691bdb07c2fee6ccccc0299131dd6cd201889d859b62cc58332aba575f9430e88339e1fe112ae2d33131d6960de1b9d98381547e289268d4b4f66d513caa5550737cc6a5e86cd70f51eca17d55be607a7cb4fff165a720fa7ec6e6d18aacd1f11ec0c922fb518bfca53e7ca613adb4c123652485c4603f8149b73d77cee2f93cda01cc4ff0fc5cd6883c27a2c784e72bb54adcc4825155535e5713d0b9aabf8aef83392a33c5b19ec5a58533f46f18d996f34eb54c9997b7011e6809309baa5ef84cf1869a7b0492d394b2748397a8852b2cb52fcfa3171b5a63a98179e4a4a562215ce14b6fa7df19f9b4a1a96a923e7b50d48bceb598f2a60a56d01a5052b6d5c9a32cbed02df6ebb603edc71170cb0b27bb2ae83342c1f16978eda842d817cce8b02b3ba5b1dc58963132c636c6497c46d4c78af78a32ace3cfe045963908cc7a917929ebde1f1b5d8d648638c4f777f2eff4b0c2bffae7e686ea92a36ee15a55592ecf97cbdd8180868c52206f912a9d72e5c7aebf804e8268a9b2c5fa82909f6cc8faf9b19a470d54ad14032ff5d5812c1c061f0f08b9fb0eb23cea0651cd0b80f9bed0ad68e96549b41e451f8ae3a12b710636e0acc25dac7ef68308afcd6975cbddce0f4158bc77e33bc25cacbdd48c8ff07873506f9539fe8d76f3e3f5a4c57ea5d49b1b1ee45e4f739a8028afd9189f312ec6e1e7e59ee423b9d83b6a6165fb44ecb32f080b20c514e52fe2d2654127e1a132de9a96ae04d514b8ee86fb8d7d84a28339e3fa9cc4973ccb7085ba0382a20305edd85f1ad58a613e0f6e0f49d054c1030192b8ef6c43c85ffab2b8195b18926f05990b279cff9772903a2bff3dfaa34cbf52ce1f1bea002718d1d32d57a9d090b93cf8d3d0474e4bb7a3cf560544bc970eeb13e55bd9211d577a8928e69cbab38f1997685671e6f01c73bac690769a797dfd8f135b45fc048b8825b2b12f21633acf8fa4b9271fb49c82240fcf9bcb1e7de27d9860e90a6ebaffef955ef7cb3b8ccf6e9b7d77570f1ad16114b5e905e95dbc778334ab778286eb7a412a4b2276a5afc3b71a505f1798726e81888dc68faf6dfb18b76fd3bd27728685676f487515bd181213f4e1ea81ff0181f61fa0b0184f276f09ec26f1ff6a04f3783f5e4727b7475b2327c73422243570c110c7c63ccf498bbf320c4b6539dbaa94dd89fbfc51f87ab7a52e81e7500a37c10b7689b16934ef7478b23a87b4c1478a9db04c662bd87461f508efa1e3efcd059deb6b19db7d4e4bc82c3c1732537c2807dcb9a5d12cdd4b59398a1dde26ad1f50b5ce20241f1047b0e2142e552ce23a0a514d2e0c0f7f54c84ac1cca0a913234cbff4af823a9c51b137ad77fc18b9d302a73e64c20a3daf0639e13fac9f05aaf1c4bef3979be89772038b5906154b98f4b30db142e3df8fc935b0ee75e76cb900215ea9e7c7554fca07dcd38740ef7471c6a58ef825660abb6ef51d3c0f4472a01b4e71662204b4fdaf11f75158685ad8997a63aef0d9018e9a0c89dcbf8994227e65af4c92e1e86c66206108f6745b8b36804947ae6b18cc88fb1f2fb18554226732e69eee470f0b9e493e2aaeb7288020cc7a2b98327e9af17d58c84e701b453c5a408a2f3</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Second-English-Blog</title>
      <link href="/hexo/2019/12/11/Second-English-Blog/"/>
      <url>/hexo/2019/12/11/Second-English-Blog/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fea58610f8ed357cd833bec01bc0944ee272cf0720178990f3e8128c60746e78">535c45a94781229f73e0154c3e1835f8c7a6a2f8b67b0a55d268dc2d8556d7a2746d662523f3d9617d5f11fbb3eebfc79aa399eca36db105e10a31ce371611ce6116812db6d9a01e14038bec07308a0bab8402f69a6e5c6157f1eabcf5ec8680e2dc04708e837f194a794b781bb8731c1b005995f2ebbc47f1d4e990b29c5987f1720bef89a7988d1235fbab9cb08862a490df5b48b8d51540f40a20afb3dc30d5d9b0efe576a245d97d6c8f5d5df7b80e989d2310965267c955823d32c08829cabb9a3a909c1e71ff45f86af6ac24f1a3afe5dfcaa9176c02f25c40f785fe2ee4d394d606431651a6138e26bdf138fd68fcaaba53036130777027be83953d438f4aaf7492eafd392beb1c4bbf8d59612dd6cd3f0334c85edd0cdd149d8911dfb2b0c3d67684629505c92657f0961456c53045349235d76cd3c3f0476a9b29a57e4bca5946fede8d9a6f474b6964bb241a52c83d2d4156052b26c3ca6c1b7e3175b477413e527f3ec0ac963f7d43167058975a07f2ff653da7ffa1d713431fe2933178a0fed40fb19d7efc29423fa5ae9d16d15e428105d6606a2977c446bfef6db43505de43fbf589154124c3806b2298427511d8b73e5197c416fa998509425322829f18451b4c995c91d3b00788de126d83cba72e0257707d19b2eddbb7295619d9d8040d942a8b8d911deee83edf2b06c7960e160f44f74e664fc204da5228f43dfd3fb5d5725989148ec0aec6d2ac86962aae9edc7b137a9247e4e427551655000f86e8552299a8d4817a1718bd66792346bf44a9a69a08519857639cdfce45c4e0795e3610452708f51806f4cb7945aca8dd9aa445e0d91a57cbef26fd655eef4376497fa3675b92b2a4b649dbb7ac0e118b103aec5909ba531b4850e12a241652cc07c693bf9dacada117ce64401eec1b78560e21f90b8ebe9975cea29c29ba44f85da06ca6d2237fd3a7b7413cd1b1520e5e3620b42edfc90d5c8de4fd55b81ffc2d65d2e5837094dd66a37a7355ee56f4f79fed47762a919d240c4844a06bd1e0c2d987c6eb55e1f03095395c22c9a86f583bbe662cef8be25e245ec1bf137416bdb2c752bf8b6ef74b58d2af8c35aa6a90296352a10a53a91812fc47c17709e5f4952d5f4062c2a15db20842ddb846a5298003242a3ceb1cfbdf9cb6daebaf5c6f41935419d1778709c299c79595a44e4d91ff9fd84f9e3970fed323b35ebd105449b9071eb6baa97bd2961e0638268550cc6255bfcefb81773d58b4a633d7ba4fb7ea35ae5fcdc93848bf0f9c6d8acb81e5540ec4ed4dc9389d9d5fd358923bfe00a26d0b7367f286c03448db07fe48fe234168b0b8947f681ca38c947edff075e297bfc2197d279649bcb218646492c4a20a3f83ccfce6b50f8958a83394e7389f9cf7e1727ab51f1ab32280bcf973c702253c5945a7f0270f84588c6c890bf21c374ced2eec5e366c5de7adc3529478dac418ec268a5e533517f3866d74ad2af2b285ccd9357de23427f145f9eb379d4fe00b84219995df5722f0beaeb9f4e6d6d26825ebcc6ed30ba6cbf46c1630c4a1b0c33bd8f9b24f8ec98f159d62e38a9520f90916fb557d6f154cf7c466c2e5079cf5ccd75c968505707c4da79bf069dce0779eaabd363a9c474a326e29a39c38afac3ebe03d0f7d835ea63277f8d2c074ca0a5c0e39a1d3608838a3c5e7437e9f14c326fef2120f54ca45057e79136adcb0be2f1716951dace1f03caded6a9e5834883ab2c818cfed818c99a8261b4fefbc5b9a4293658bf3320f74192387feec4caf528579bd450fe1da58ba3bf8d2ac402b0e9c0e33581c20343104734bbdab4e6e3531c25cb28e480da2c5eca4ccaebc9cb89cbdea8056aedf6b96144b11da036fe1fb2f836d9ada4dcae89e238f6ff242dfe425a7872e27e58a617509b0567b228a1fee2dcec79773b435ddf29ab85a68541079eba6ede35c4784aaeed7bc7fc8699b53d6c6cf142cb7fbefe16bc5fbedef4363cdb665a9d66305f4b7e9ab31e075051de8dbfc43cf82decd0ebaa7a34dbe3c19a4a926243dac097c0a40787badbb5ae9053b6604e3ecb850c7c076c824b0a85c2d294adf691b7d3a25616c1f0b2ff790cd54c7c4a930a9c04682369fce96576d4f7c758afed1a113cf2f11763e09e7d28d8466c59cbaa76ddb5584d53d0be33ed0c364810d09ee1498bbacb85cf75a013f4ceb22cb54329e5097e6a7ded8204327767dacc531f631521cc796716fe8b25d1f925c78807a65a0833e8d132690a8f846860</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>First-English-Blog</title>
      <link href="/hexo/2019/12/05/First-English-Blog/"/>
      <url>/hexo/2019/12/05/First-English-Blog/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="562d31f72f9edc19eb0ccf448ada1b56fe2fd39a7ee79e5618e870e0d155cd38">b9242b4bf6a87e7c6ad48195e87b1d224a883ca22142f6a9583f518e29885cce7b594870ba81dbc21819ce2a0201c4548ac70d0da46b139d3581e39a2cca864f76649daba9758857cff5048f3c4a6b7f92526381e1ceb09df7301c80dac24f8fa96432e12304c76a0285ef918de364ae366c4f59ff86c17d13f9efd811d021ca1c94c82d9659aa324de396825e58e394296b75bb6a213dbdff6d7282ecf04c351bf57aff820704777b6b70d6b105dd15fac98385a8f869eae95cb20578fcd9222b9d3e76102053340ff1c95b48fa5b2c4f575dc4cf0314b0bdc61aeaebbdc426371a6b67e4bd2943293e2c07f09a53272af246e32c0392fc3722fadd651ad77077d6e4b2d9ef0f37eac93a7c52e5e986d03cb95e50a462935e8ccad3215da4bbd6a43f811d31afab551a75f464866e8324bdd5ad27563bd22fd8446d331add02bab8113312f079d28f48691e054386927033eff0c68ef1ae6d1cf8f809d63aa9e3f68f86ca66021c197c69c7eafd9d341d319c157fb89d19a4746f15f637147e8066a0e85bd9731500d95c524fcffa74228310f87b2f8761e4172d53925dc55cbb8f240070d2e55193a96dfe514c87f62262381649665ca6ce01ed09d64679e99a752c0d0005df2bae580cd3e337121e244a69483615cd5b7b819a15020077d0b8fcf485f13e5e3be986191810d60c2e502af74775e90a9b6abc4e5029956d1c04306104c59697910142d2ee665b07c5f734896797e8888dac22e416364768c4266649940206db5143950fe7f27be60b59cfd432ce046efde4e4bab98008765b3ef9a6d00751609dd89c9e02a821c71c9f7e83bc6a4e861202019220b1afcc7e8b8621559e68e9db9040e97bf4739f0d82ea487b697fd18f714787a7386f06421acdebb00c988b6227766bb15b3ab97e28368d7619d8da71904750bfa9478a41ac681f547d0f53b9aab55f7bd27c8f3522782706d8e3fc7e7e5367492db2e318cf8551b558903978c773d7a2584537f3ebb900aa5bc91e2a87972caa4999ec106fc0d83c6ce792154d18c397c53dfd936e0766843c4c5b86335ded51b9354b37e5b9a803daa1e9c7466be199d23d2be622ff3b3fc57e7970b254aef188a292dfc713fe4b24b2bab883bdfa069b06f946cdeca15bafe4aaca86fc059b1aa3b534511c7d22c64f9c2eab2cf54875dcfcafcf185b8dd658e00274488e14b960b4c2c4be67e14b70ba06554f69d6a78cdd2a3c5d85a8730a1f8e332f4f8bbcee5a36c33bd5fcf75577c5013f2786d899ed4abd1278e1981237e72dca05dea2b691c1025f17bf026e6501fda2a258e5c4477ba1917c593cc34abc1cdf005220245117c9287e6d0ef19d1c0ebe5dc0603afb33704d2a54bcab3f737c124b9777f59f83a218244e0e28eabbfcfd4a1c265a668cf77868b4f141b217d4f418a4846e43648191463f25d5a0bb78bade4e9d18af5163c51a59d3e4a76d303aa150ecac3d76412b2609c15bde1399cbf19cea59cd4fc79cd4b5f4e3cfd3ed74109c668683db849070b4b4b5c9f11f8391ea45365fa90be00143d44b23943f786774f3f1735e9effb4d2d8478ca2e23996535593238a0648c62edccb8d698857d3cbf15bd17b050e5a8cdf11ae5de5ed662ed4dbd4ba31f07cd26d46b65e0be5a5ebb97d3220fd7d0ca71a636f0cad341dc58958da05d2cb8ce9521e8b3a0ace36e8b759cda24a03e41e148503539f2fb4102fb2bbaddc90344b2a618959cd74bb19c13035107f8997a7499087affcda829d66ae40f4a141ab246360352a4fffe19b670a8f8c01523dd6f833161bea8df7d5035697cdfe178484ddff766c6d3d996aa481f6d9db75c0ea307d794d64136378a942c56cb657bc8ac0f65fda47cddf80193684bb3d4b43842453081c80612b5424f8312424d7f58cce2bb01663b44f895b0fbebea8759e86464db0476cc9533828f2c2307d6482d91d9e0c91958879b2693578df003f7a2b258e223dfe9112b515c1b866f562edb930c8c8f9f874295c3a67748de90a00bf028f7debbeb1084bb8bf7e251509ac0c295e52fb4f625b2ab4d0af97</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣诞计划</title>
      <link href="/hexo/2019/12/04/Christmas-Plan/"/>
      <url>/hexo/2019/12/04/Christmas-Plan/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d198230bee12e24c67e52db0308eae4e6cb2b67c00f19d15bbe713cfc32ecf8b">39f9c75435a63aa575ebe71aa01dd6f9704ac588750b699ee2b24e0e52d84110c7590a0f2f75d52c9191ff8fd83a6fee40d4e0c919575f9f0ff96dc6cf871d47dd59bb7125808709daddc618a8d3e7209842709a70ad0ab42993a3ecf91c6f2363d1c7622d1c1071b2f2fab174aca3dc559556e3413c3867abb7df05bda39f90d396e7c519d280e39956d12c2b376b672b6e8116536675f79f834270130206edf9bd0c16b430a21868a629d3d73554217c5c341ddae55571979cf32508282862e3acb884929b49246d708aab6ea7e6bd9fea8f505dd46ca69a9534e826507c61ce7a281e4b959098b52470ba4dc3330ceaba44e4158492f2862e703e54d34d1313e142d811aec62cb0bd095314eda296405b912888b8bf10d441fac9a8d62d048aee3acb2f009b14870a5036980f25bc1eaddb9da179fe782b51be6cc390479dfbc9ff82ed64b5b95f5402c23e3b9793c487328a0040bb140e90649259db1a6e0860dcb53025a18f1e9f55c967edc6ceb0b59ddf940a98f685da59c47d4a631892df086faa53b817021717c02439f7583f34da99e87e80b5214f5f57787d556c1aba44945ed2009ea53bdb180e2e9a3b</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> Locked </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19-11-30-diary</title>
      <link href="/hexo/2019/11/30/19-11-30-diary/"/>
      <url>/hexo/2019/11/30/19-11-30-diary/</url>
      
        <content type="html"><![CDATA[<h2 id="日记-19-11-30"><a href="#日记-19-11-30" class="headerlink" title="日记 19/11/30"></a>日记 19/11/30</h2><hr><p>&nbsp; &nbsp; 最近老想着搞个树莓派玩玩，但是不知道我买了以后会不会成“吃灰派”。所以我理智分析了很久，做了全方面的调查。选中了下面的<a href="https://www.canakit.com/raspberry-pi-4-starter-kit.html" target="_blank" rel="noopener">套餐</a>。</p><p>&nbsp; &nbsp; 之所以选这个是因为：第一树莓派并不需要键鼠，所以Complete Starter Kit 自然pass,第二裸板有不太好，所以选了Starter Kit。这个一共CA $134，而且我手上有100美刀去银行存起来大概换给CA $132 自己贴两块钱刚刚好。</p><p>&nbsp; &nbsp; 下面来讨论一下利弊。 </p><h3 id="利"><a href="#利" class="headerlink" title="利:"></a>利:</h3><ol><li>可以搭建NAS,正好用上我的旧硬盘。</li><li>我一直想搭一个天气和snowday情况播放系统。</li><li>对于学习<code>Python</code>和<code>Linux</code>还是很好的。</li><li>相较于软件，我对硬件更感兴趣所以<code>GPIO</code>是一个优点。    </li></ol><h3 id="弊："><a href="#弊：" class="headerlink" title="弊："></a>弊：</h3><ol><li>花钱，成本高。我选中的将近 $100 - CA $134.</li><li>不知道自己有多大的兴趣，可能成为“吃灰派”</li><li>花父母的钱，心里不舒服。</li></ol><p>&nbsp; &nbsp; 今天暂且无法得出结论日记到此。</p><h2 id="后续更新-19-12-08"><a href="#后续更新-19-12-08" class="headerlink" title="后续更新 19/12/08"></a>后续更新 19/12/08</h2><hr><p>&nbsp; &nbsp; 最后，还是买了选的是<a href="https://www.canakit.com/raspberry-pi-4-ultimate-kit.html" target="_blank" rel="noopener">Raspberry Pi 4 Ultimate Kit</a> 要CA $149在加上一个CA $7的风扇。本来想着CA $156还好，结果加上运费和HST。妈的要CA $192。 好心疼。😢😢</p><p>买完后，意志消沉了一天，什么也没干。总感觉唉。。。一个字亏。作业也没动。草。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
            <tag> Raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Live2d-1</title>
      <link href="/hexo/2019/11/12/Live2d-1/"/>
      <url>/hexo/2019/11/12/Live2d-1/</url>
      
        <content type="html"><![CDATA[<p>今天是snowday所以抽空试移植了live2d到Qt上，遇到不少小毛病，特开新贴记录一下。</p><hr><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><ol><li>现在Qt里创建一个新widget项目</li><li>把Live2d Demo 里的文件copy到新项目里</li><li>添加文件到项目里，覆盖main.cpp</li><li>按照之前的vc的项目文件把头文件和依赖库加到项目里</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INCLUDEPATH += &quot;D:\Live2d\Qt_Demo\Core\include&quot;</span><br><span class="line">INCLUDEPATH += &quot;D:\Live2d\Qt_Demo\Framework\src&quot;</span><br><span class="line">INCLUDEPATH += &quot;D:\Live2d\Qt_Demo\thirdParty\stb\include&quot;</span><br><span class="line">INCLUDEPATH += &quot;D:\Live2d\Qt_Demo\thirdParty\glew-2.1.0\include&quot;</span><br><span class="line">INCLUDEPATH += &quot;D:\Live2d\Qt_Demo\thirdParty\glfw-3.3.bin.WIN64\include&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LIBS += -L&quot;D:\Live2d\Qt_Demo\thirdParty\glew-2.1.0/lib/Release/x64&quot;</span><br><span class="line">LIBS += -L&quot;D:\Live2d\Qt_Demo\thirdParty\glfw-3.3.bin.WIN64/lib-vc2017&quot;</span><br><span class="line">LIBS += -L&quot;D:\Live2d\Qt_Demo\dll&quot;</span><br></pre></td></tr></table></figure><pre><code>LIBS += -L // 意思是把整个目录加进去LIBS += -L&quot;目录&quot;-l文件名 // 意思是这个目录的文件</code></pre><h3 id="问题一-报错未定义的GLint"><a href="#问题一-报错未定义的GLint" class="headerlink" title="问题一:  报错未定义的GLint"></a>问题一:  报错未定义的GLint</h3><p>出现这个是因为vcproj里的预定义没加进去。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEFINES += WIN32</span><br><span class="line">DEFINES += _WINDOWS</span><br><span class="line">DEFINES += CSM_TARGET_WIN_GL</span><br><span class="line">DEFINES += GLEW_STATIC</span><br></pre></td></tr></table></figure><p>这样就OK了。</p><h3 id="问题二：-出现无名obj文件，并且无法打开"><a href="#问题二：-出现无名obj文件，并且无法打开" class="headerlink" title="问题二： 出现无名obj文件，并且无法打开"></a>问题二： 出现无名obj文件，并且无法打开</h3><p>这是因为pro文件里多了一个 “\” qmake误认为这个也要生成obj文件，所以导致此问题，删去即可。<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-11-12-16-22-37.png" class="lazyload"></p><h2 id="未解决问题：一堆未定义的外部指令。"><a href="#未解决问题：一堆未定义的外部指令。" class="headerlink" title="未解决问题：一堆未定义的外部指令。"></a>未解决问题：一堆未定义的外部指令。</h2>]]></content>
      
      
      <categories>
          
          <category> Live2d </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Live2d </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建指南</title>
      <link href="/hexo/2019/06/22/use-hexo/"/>
      <url>/hexo/2019/06/22/use-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建篇"><a href="#搭建篇" class="headerlink" title="搭建篇"></a>搭建篇</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>之前我是按照“CS专业那些事”的<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">教程</a>来写的。但是我遇到了问题，如果我想在其他电脑上编辑并部署怎么办，于是我便根据这篇<a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">教程</a>重新搭建了一遍。本教程适用于仓库名不想取xxx.github.io的童鞋QWQ</p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><ol><li><p>创建仓库，名字任意</p></li><li><p>创建两个分支：master 与 gh-pages；<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/(2).png" class="lazyload"></p></li><li><p>设置GitHub pages的显示页面<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/20190622132928.png" class="lazyload"><br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/20190622132939.png" class="lazyload"></p></li><li><p>使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:用户名/仓库名.git拷贝仓库；</span><br></pre></td></tr></table></figure></li><li><p>在本地仓库下用Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为gh-pages）;</p></li><li><p>修改_config.yml中的deploy参数，分支应为gh-pages；(这里有个坑，冒号后面要输入空格)</p></li><li><p>设置root<br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/20190622132624.png" class="lazyload"></p></li><li><p>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</p></li><li><p>执行hexo g -d生成网站并部署到GitHub上</p></li><li><p>查看网页。xxx.github.io/仓库名</p></li><li><p>最后一个是语言，我安装了next主题，但是语言其实是要在hexo 的config里换并不是next主题里换。</p><h2 id="至此网页搭建篇就结束了，同学们可以愉快的搭建博客并记录了。"><a href="#至此网页搭建篇就结束了，同学们可以愉快的搭建博客并记录了。" class="headerlink" title="至此网页搭建篇就结束了，同学们可以愉快的搭建博客并记录了。"></a>至此网页搭建篇就结束了，同学们可以愉快的搭建博客并记录了。</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Hexo</title>
      <link href="/hexo/2019/06/21/install-hexo/"/>
      <url>/hexo/2019/06/21/install-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h1><p><img alt="Github+Hexo" data-src="https://storage.googleapis.com/peter-duan-blog/19-06-28-13-20-28.png" class="lazyload"></p><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>那啥多的我也不多说了，相关知识自行谷歌。此文章参考自知乎大佬”CS专业那些事”的<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">文章</a></p><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><ol><li><p>注册GitHub账号<a href="https://www.github.com" target="_blank" rel="noopener">全球最大同性交友网站</a>，至于怎么详细的用，我会另起博客。</p></li><li><p>安装<a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a>至于Git是啥我会另起一篇文章</p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2></li><li><h3 id="安装成功后，将你的Git与GitHub帐号绑定"><a href="#安装成功后，将你的Git与GitHub帐号绑定" class="headerlink" title="安装成功后，将你的Git与GitHub帐号绑定"></a>安装成功后，将你的Git与GitHub帐号绑定</h3><p>鼠标右击打开Git Bash.<br>设置user.name和user.email配置信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你的GitHub用户名(去掉引号)"</span></span><br><span class="line">git config --global user.email <span class="string">"你的GitHub注册邮箱(去掉引号)"</span></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的GitHub注册邮箱(去掉引号)"</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥(一般在用户文件夹里)，将内容全部复制(用notepad++即可)</p><p>打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHub_Settings_keys</a> 页面，新建new SSH Key. Title随便填，把复制到公钥粘贴进去。然后Add SSH Key.</p><p>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br><img alt data-src="https://storage.googleapis.com/peter-duan-blog/19-06-28-13-18-52.png" class="lazyload"><br>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p></li><li><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p> Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v 有数字说明成功了。QWQ</p></li><li><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p> Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行(这里有个坑，如果是powershell的话详见<a href>传送门</a>)</p><p> 使用npm命令安装Hexo，输入：</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p> 注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p></li></ol><h2 id="至此，我们就安装完了具体使用的话详见下篇博客。"><a href="#至此，我们就安装完了具体使用的话详见下篇博客。" class="headerlink" title="至此，我们就安装完了具体使用的话详见下篇博客。"></a>至此，我们就安装完了具体使用的话详见下篇博客。</h2>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test for Language</title>
      <link href="/hexo/2019/06/21/Test-Lang/"/>
      <url>/hexo/2019/06/21/Test-Lang/</url>
      
        <content type="html"><![CDATA[<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>This page is for the language.</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序章</title>
      <link href="/hexo/2019/06/21/First/"/>
      <url>/hexo/2019/06/21/First/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Sorry, please try again." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Please enter password.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="c27166f7f2476046efb63ae9b24ac5ac9a709ade48f5e51ba6adba2aa9ae4a82">77462c94b8c397f1792e9067b324c7ba4128fc3ca563f27831cfc2389eba7819981737c3321ff8dbaeb8197fd7902e697abd1c69c67c17936d3d35ab2034cb2f131da551a964d692a05b4583c4600ea2c171bc6eb3305c7fe0a0183ba20d5b95e3b47ab0dfcfd08f26dad9d5c45d46e6df0ebf886326139a2fc84bb58ba0b84d8ab53eacd651b7c1eb4ccddd326bd03d63a4a9907168d16ca27ef98cc85eb134b2c75765a0867a8be2060975cf2e96994cf4210ca74db5fdfbca40abe442755fc094d6c12264f41f9031be3c90384fc63d84fe83625d9382de2d795866d500258f38d3ef37d7f49e2f1448d6979d6a89f8ebc06013a20d10e2613db305bccf76077bbbce1e73d02288080cc741fb6e55c4c8e6bac57bac089123aefa0e367f7642b33887ea96137062db691567f1a444bb92655d068eb39776428cf20954f327ca53dce466136ec67ccf5ec6e48d8af0053fdc32c4916a160b62b5669483fb7b4b952a968cc2937919550a97c590ef09799cded641b88cb49f7e0f3b7647323ad85ae5d71312a101b6277e9207e82435e0d8a88a149292d6fae9ef8dfc4e67279bfa00cc7b8530fdd02ff1681d72d96a060b2ae6b076f7469d85819fac477e842d639f9153d496546899bc554297b33292d231fa121ce422844091c0cbd4637075a19aaca470861b4d459dde6a0f509c7f2696b8982fefa3635bebd98ff3f306de936010443f1ec7b16109dda580be1257e61d5cbbc0da7142ea1d9776c477f8f150248eb3dee2df7c801c64d4cc8e2a566c4657d8a0356998cbf2618db90512400631087d8c178b534c6950ff105b864f5235364dda7e07148e6ba246001a5d0d637c4d1bc0b888c2cb20b1583213e84fde820b495b8b629e957aa271b9f34b7a80f857b027baa7002e28c84c49e5d710cd42dc1fe09fbd4196c204f8a06b8ebb1ae9efe3bc4d6931cb14834f32455c99c9328d06d4c402895a5f9d5ae7daab9cfa4c888b40bc3d14ba8d71c40cbd492d5420e339c8d83b80d754b0ec9cb296e0d174a2cef30b1f1100b5b6c135a79cb3f9b411a92b9b5966549802acbe07b940049024cfec8ef60bc0b0959c26172618cee64ae67af1c8e008bf41052b390fc38466a0fb189c3c8c665bf1d5b29fd9d45498827b47a9d60b73fee84e045275f02e4f442204c95b30f881ca59173c4c2d37c64954419f71e8182f4734e78fc58d9c25a1eb24300f15478fb4c70abdecf87fe51e6ef59f726afea54731fdd15810953ca85b2659583b89af5d690f915deab211d0b69fba33674a9b839fa9db61d2387dba96e23fc1e257dcfb58fc891272d3075d449f54150a988ad354e928799173900ccd7ecdd8bf45f3933b4a5c5d0170bf7559b58a84f16a41aa7b4ecfb20da1740936ca102eec88d1144699ca721d63dff69961005187971a69fcdf7d3dc9fb7cb4f4be3c165f727020635fc2ea379840038ccbd69ae68d2b3e69bdda499b8c2236d1d1a073c5f5f256ca393dbd34fedee7d97001a53f4161fb8d5412d50d19c77702a124ec92f7d44c77d3b3d048791e910f74fa2a1f39ba6585fcea33e53592ddb23832321ae2648effe14d388556b2c56bda5f25301f37930f3a13ee78057ab4543aed310f671395192b636ddf3a78b10af7d0bb00794c19d49ff985cc7b1bea118c2769173a0c81cd4aef8323283e108610cc62491c6e28d94227b821a6a7a0e443293120a627e1bef36dcca70282c439285d943f8ac5bdfc1f61e0f51a58e2069f574366997f619ed3c346c562d424c4c46cc5b5d36b60b7a0f8381ab57249e341b69da603e5326a20198825d7e5a17e4849e0efd7b213ca15d8aa53f16a177ba09f30691d3dca4832576794f93f47ab3787e18a02dbaadada2a02169838e9618b4333e47e789ebc3cca6a4b1508da0026f0d69c0ab25c8f0f87957b9610290495f39e07281307a29586a225c6eea1569b3e6c0a23c5bb5766141593977d5e41a27da7ed737931ff1074e6596b5cbaffe80a3b6cf9e25420fe958bdfe6e6d4528d0cc1c563d50ccc22af5a28665a8dd632fa4b524f703c14bab4f04e23fef1fd60caf70b5450439638d68082e0ea71d5eae37c63e220d8e0fe38a3237ccc68b5a57693c7c9979269d110f0dacc6f816e517d4228b9b2ff20d7aed0170bf3992fc9f139c563be06efc3e03b1658f023817c9294a5ded8846d2a5d67dbc03d483820136037669d67dc0d3e27528a2b9c6083750a228f92345afb323c8b5030ea9e04ac2feaae041a8788d62d0981fa14767059b81f0eabb0d82d5305461972ad971e2ae8bcb11405f92b21261ef995e30aadf5dddfb8ce312c811ddad6f1bfb85f2d43f9baefcbe80a02e3bde31b2aa45fa4ef7b6988d3c3ef89292197fbd57900ee81192ce09c03ac8ded73b8d04321c4982954de11ca5350791e85f2c88d089191f38b2b5c08e8a2726e44dd672dda2f9f33a3d25a5e7f065b43b4daa2fe14a6d8155ea87f02a81b7dc84713fd381134dbf366bd995c7dcc41dce45eeccfd33b5682daf4e12874c80520df035694abaf71d988eafdaebeae861f91ab422b1c8c179fba14b09ec9aea1ea1fb0c8adffa76096d29875f1d2fc3d193edc71f5a6056923fc3c87c67ed10f75f76a36c02216449fa4f9468688d7f2b165c3634870e848325c986a5f3630a0413bf385e0da5ce436d0c23d5d56d36bda1042fa1a1b9419851b5f62f5df6538f735ea7c9813862ec2fdbcff67df01c3fc3488f10244dfa705be2fdfb779bb111d28fdf2232f2085fbfd3095de49a20bf8988365b2871332b868420292357c1d07f96c3553fc66ab32e3d490293dc2915d2e548df9da499cbf5139b86ba497da083e86162ca7eda29b3859b39ea2e3a903d8faea7ef75358401d41566288a3ae56b09e7e58c46f8e8a88ea8bf0340703cb71263580fd90775166db3c171dd4fd031363be5c7084db6455bd90f9c289c689282a1973512c28e4402bd47171cb9d610606de20a54e2db2a402427e31a0dc37429129ddbbd377e17eb0a1fc1b8eed7261abc6c1ae989000aba97f16d654867e3e2a2f4505c84d8922e18175a83d145e14333c928e53edf4b9b6669b576221b69f9ef7821c633ebe257b6e989d414047c48e713dfeb9f7e3d03a90bb841dc9e94a414050ccbd0b5aa96d08b31b8570a7b879dec3765da1d7cfcba6ff19d6eb6b03ffc5af5a6905084fb5a12b12d88df6bef6709de8313c9338cdc90d7b7f1b0d3e5b64fe65e5832a5a76d9e617b00e46409397cf905480d440c922b16200dca7aaffcc6c907de826a9e003099f4a994e3217e084f2e61ddf3686245523ab0e0e1345407443ad931bc52ff58a2e03196b966fd44f469a81c652682a38aa9a8a960d260d6b7e56140a287a445fd5747acad6e94600bcfa718882c890be4238efd36ac76cf7e19328a9ec7aab6539c8a4de27033fe145f0eef0c7482691b94c7c40f03eba5680dbf640b450dc1e2b3f7d709ce6473f2eb3a646ec1f217ec429b7a7edfcb65dbc5d82e4531b8a790b168ca6a93a10a1d379d5fdafdb7b47bf36c7694586a4ec7b26c7b4548e839e6621370318f8dddd052dac632f46c4f58df6260bdc53443fd67f17dbf3b8c25ae490e17ccab1f2651c932e0993d7227c076a216a9f81eaea0bf25430b0f1619106a82581cbaffc50e8eed48321fe76079dcbd81d0611e629313509ffe682dd8f1e6dbdfc4b27cb4865df2498703972b529f4de12e3446f92a1db76dc4c9baeb92decdff3cd8bfe645565afe6ace8370b178840781b9514257c17eef8d75bd1c05842446853379b35686a271d510ac9294bbb00d4aaea971d857937ade648fc351cf0b00979cc1293af8c76f14a3200727e2c492660d8c95f628df2996f4942e30fe7f7530263ec9821c25296d95a8880046b37b10af4a214ebb9385d7c86eec84f6e7f5b6347a3f4f67bc1392cd260db93a853e39c2ae2da7abe53cbd7e915ad25af5e20f022e27165fe58821d7edb4a2b5a5f1c9570745d9544261a184fc7e75fbcbf734b99bf1b1466f3d8b365e9a05afa0d17425479d51b178aa3db4e80e6662786222656137e2362baa3bf31917d43722b70f95f31fe8ed5913d94ef0934d405de230850e09d16bdbd3214d9b6324237fa6be694c7f2e352ae7b672ed739a4202310cde5adc64ac173adf135e51f6231a899642dfe110b1877eb608b9cd7e1aaa078261aef8bea14133f9985a458031279d1632166f16a72f601afcbc50fffc184d28ffd79c0175c9af256f4c8adc59ebe651d567c0866c14b6f05f9b977ca54b17f490b0baabceb3a9fb8053e8df564c85d7d</script></div><script src="/hexo/lib/blog-encrypt.js"></script><link href="/hexo/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git </tag>
            
            <tag> Programimg </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/hexo/about/index.html"/>
      <url>/hexo/about/index.html</url>
      
        <content type="html"><![CDATA[<p>某个想当苦逼码农的留学🐶。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/hexo/categories/index.html"/>
      <url>/hexo/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/hexo/tags/index.html"/>
      <url>/hexo/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/hexo/link/index.html"/>
      <url>/hexo/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
